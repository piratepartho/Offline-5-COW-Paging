diff --git a/.gitignore b/.gitignore
index 07216f3..8cc54ed 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,4 @@ mkfs
 kernel/kernel
 user/usys.S
 .gdbinit
+.vscode/settings.json
diff --git a/Makefile b/Makefile
index 39a99d7..96cc6b1 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +133,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_page\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..af6546f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
 
 // bio.c
 void            binit(void);
@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -63,6 +66,15 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+// void*           ukalloc(pagetable_t, uint64);
+// void            ukfree(pagetable_t, uint64, void *);
+void            removeFromLivePage(pagetable_t, uint64);
+void            addToLivePage(pagetable_t, uint64);
+uint64          sys_getLivePage(void);
+void            woLcRemoveFromLivePage(pagetable_t, uint64);
+void            permissionPrint(pagetable_t, uint64);
+void            removePage(pagetable_t, uint64);
+void            swapToLive(pagetable_t, uint64);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -107,6 +119,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..973696b 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -8,6 +8,12 @@
 #include "spinlock.h"
 #include "riscv.h"
 #include "defs.h"
+#include "proc.h"
+#include <inttypes.h>
+
+#define STATUSSIZE 1000
+#define SWAPSIZE 1000
+#define MAXPHYPAGES 50
 
 void freerange(void *pa_start, void *pa_end);
 
@@ -23,11 +29,355 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct pageStatus{
+  uint pid;
+  pagetable_t pt;
+  uint64 va;
+  struct pageStatus *next;
+};
+
+struct{
+  struct spinlock lock;
+  struct pageStatus *freeList;
+  struct pageStatus *liveList;
+  int liveCnt;
+} pages;
+
+struct swapStatus{
+  struct swap* sp;
+  uint pid;
+  pagetable_t pt;
+  uint64 va;
+  struct swapStatus *next;
+};
+
+struct{
+  // struct spinlock lock; // swap will use pages lock
+  struct swapStatus* liveList;
+  struct swapStatus* freeList;
+  int swapSize;
+} swapList;
+
+
+void initLivePage(){
+  
+  acquire(&pages.lock);
+  pages.freeList = 0;
+  pages.liveList = 0;
+  pages.liveCnt = 0;
+
+  for(int i = 0; i < STATUSSIZE; i++)
+  {
+    char* start;
+    
+    if((start = kalloc()) == 0){
+      panic("initLivePage(): bad kalloc");
+    }
+    for(uint64 i = (uint64) start; i+sizeof(struct pageStatus) < (uint64)start + PGSIZE; i += sizeof(struct pageStatus)){ // i is the physical address
+      struct pageStatus *s;
+      s = (struct pageStatus*) i; // make the pa pageStatus pointer
+      s->next = pages.freeList;
+      pages.freeList = s;
+    }
+  }
+
+  release(&pages.lock);
+}
+
+void initSwapPage(){
+  acquire(&pages.lock);
+
+  swapList.freeList = 0;
+  swapList.liveList = 0;
+  swapList.swapSize = 0;
+
+  for(int i = 0; i < SWAPSIZE; i++){
+    char* start;
+    if((start = kalloc()) == 0){
+      panic("initSwapPage(): bad alloc");
+    }
+    for(uint64 i = (uint64) start; i+sizeof(struct swapStatus) < (uint64) start + PGSIZE; i += sizeof(struct swapStatus)){
+      struct swapStatus *sp;
+      sp = (struct swapStatus*) i;
+      sp->next = swapList.freeList;
+      swapList.freeList = sp;
+    }
+  }
+
+  release(&pages.lock);
+}
+
+void addToSwap(struct swap* sp, struct pageStatus* pg){
+  struct swapStatus* curr = swapList.freeList;
+  if(curr == 0){
+    panic("addToSwap(): no free pages");
+  }
+  swapList.freeList = curr->next;
+
+  curr->sp = sp;
+  curr->pid = pg->pid;
+  curr->pt = pg->pt;
+  curr->va = pg->va;
+
+  curr->next = swapList.liveList;
+  swapList.liveList = curr;
+  swapList.swapSize ++;
+}
+
+
+void removeFromSwapList(pagetable_t pt, uint64 va){
+  struct swapStatus *curr = swapList.liveList;
+  struct swapStatus *prev = 0;
+
+  while(1){
+    if(curr == 0){
+      permissionPrint(pt,va);
+    }
+
+    if(curr->va == va && curr->pt == pt){
+      if(prev != 0) prev->next = curr->next;
+      else swapList.liveList = curr->next;
+      
+      curr->pid = -1;
+      curr->pt = (pagetable_t) -1;
+      curr->va = -1;
+
+      curr->next = swapList.freeList;
+      swapList.freeList = curr;
+      swapList.swapSize--;
+
+      release(&pages.lock);
+      swapfree(curr->sp);
+      acquire(&pages.lock);
+
+      printf("removed, swap size: %d\n", swapList.swapSize);
+
+      break;
+    }
+
+    prev = curr;
+    curr = curr->next;
+  }
+}
+
+void fifoSwapOut(){
+  acquire(&pages.lock);
+  struct pageStatus* firstLive = pages.liveList;
+
+  pte_t *pte = walk(firstLive->pt, firstLive->va, 0);
+  uint64 pa = PTE2PA(*pte);
+
+  if(pa == 0){
+    panic("fifoSO() : invalid pte");
+  }
+  
+  release(&pages.lock);
+
+  printf("allcating %d",mycpu()->noff);
+
+  struct swap* sp = swapalloc();
+  printf("swapalloc done\n");
+  // printf("noff %d\n",mycpu()->noff);
+
+  *pte |= PTE_SWAP;
+  swapout(sp, (char *) pa);
+
+  acquire(&pages.lock); // holding it for both swappages and pageslock
+
+  addToSwap(sp, firstLive);
+  woLcRemoveFromLivePage(firstLive->pt, firstLive->va);
+
+  release(&pages.lock);
+}
+
+void addToLivePage(pagetable_t pt, uint64 va){
+  acquire(&pages.lock);
+
+  while(pages.liveCnt >= MAXPHYPAGES){
+    // first page swapped, new page still need to be added
+    //liveCnt should be updated by fifoSwap()
+    printf("swap out cnt %d\n", pages.liveCnt);
+
+    release(&pages.lock);
+    fifoSwapOut(); 
+    acquire(&pages.lock);
+
+    printf("swapped out\n");
+  }
+
+  struct pageStatus* pg = pages.freeList;
+  if(pg == 0) {
+    panic("addToLivePage() : no free pages");
+  }
+  pages.freeList = pg->next;
+
+  pg->pid = myproc()->pid;
+  pg->pt = pt;
+  pg->va = va;
+
+  if(pages.liveList == 0){
+    pages.liveList = pg;
+    pg->next = 0;
+    pages.liveCnt++;
+    release(&pages.lock);
+    return;
+  }
+
+  struct pageStatus* i;
+  for(i = pages.liveList; i->next != 0 ; i = i->next) ; // go to the last livepage
+  i->next = pg; // add the pageStatus to liveList
+  pg->next = 0; // at the end added
+  pages.liveCnt++;
+
+  release(&pages.lock);
+}
+
+void addToFreeList(struct pageStatus* pg){
+  // assumed lock held by caller
+  pg->pid = -1;
+  pg->pt = (pagetable_t) -1;
+  pg->va = -1;
+
+  pg->next = pages.freeList;
+  pages.freeList = pg;
+  pages.liveCnt--;
+}
+
+void removeFromLivePage(pagetable_t pt, uint64 va){
+  acquire(&pages.lock);
+
+  struct pageStatus* pg = pages.liveList;
+  struct pageStatus* prev = 0;
+
+  while(1){
+    if(pg == 0){
+      //! gives an error initially that case error has been skipped
+      permissionPrint(pt,va);
+      printf("oh no\n");
+      release(&pages.lock);
+      break;
+    }
+
+    if(pg->va == va && pg->pt == pt){
+      if(prev != 0) prev->next = pg->next;
+      else pages.liveList = pg->next;
+      addToFreeList(pg);
+      release(&pages.lock);
+      break;
+    }
+
+    prev = pg;
+    pg = pg->next;
+  
+  }
+}
+
+void woLcRemoveFromLivePage(pagetable_t pt, uint64 va){
+
+  struct pageStatus* pg = pages.liveList;
+  struct pageStatus* prev = 0;
+  
+  while(1){
+    if(pg == 0){
+      //! gives an error initially that case error has been skipped
+      printf("oh no\n");
+      break;
+    }
+
+    // printf("here %d %d\n", pg->pid, pg->pa);
+
+    if(pg->va == va && pg->pt == pt){
+      if(prev != 0) prev->next = pg->next;
+      else pages.liveList = pg->next;
+      addToFreeList(pg);
+      break;
+    }
+
+    prev = pg;
+    pg = pg->next;
+  
+  }
+}
+
+void removePage(pagetable_t pt, uint64 va){
+  acquire(&pages.lock);
+
+  pte_t *pte = walk(pt, va, 0);
+
+  if(*pte & PTE_SWAP){
+    removeFromSwapList(pt, va);
+  }
+  else woLcRemoveFromLivePage(pt, va);
+  
+  release(&pages.lock);
+}
+
+void swapToLive(pagetable_t pt, uint64 va){
+  acquire(&pages.lock);
+  struct swapStatus *curr = swapList.liveList;
+  struct swapStatus *prev = 0;
+
+  while(1){
+    if(curr == 0){
+      permissionPrint(pt,va);
+    }
+
+    if(curr->va == va && curr->pt == pt){
+      
+      char* mem;
+      if((mem = kalloc()) == 0){
+        panic("swapToLive() : kalloc error");
+        return;
+      }
+
+      release(&pages.lock);
+      swapin(mem, curr->sp);
+      swapfree(curr->sp);
+      acquire(&pages.lock);
+
+      pte_t *pte = walk(pt, va, 0);
+      *pte &= ~(PTE_SWAP);
+      permissionPrint(pt, va);
+
+      uvmunmap(pt, va, 1, 0);
+      if (mappages(pt, va, PGSIZE, (uint64) mem, PTE_FLAGS(*pte)) < 0){
+        kfree(mem);
+        panic("swapToLive(): mappages");
+      }
+
+      release(&pages.lock);
+      addToLivePage(pt,va);
+      acquire(&pages.lock);
+
+      if(prev != 0) prev->next = curr->next;
+      else swapList.liveList = curr->next;
+      
+      curr->pid = -1;
+      curr->pt = (pagetable_t) -1;
+      curr->va = -1;
+
+      curr->next = swapList.freeList;
+      swapList.freeList = curr;
+      swapList.swapSize--;
+
+      printf("moved from swap, swap size: %d\n", swapList.swapSize);
+
+      break;
+    }
+
+    prev = curr;
+    curr = curr->next;
+  }
+  release(&pages.lock);
+}
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
-  freerange(end, (void*)PHYSTOP);
+  freerange(end, (void*) PHYSTOP); 
+  initLivePage();
+  initSwapPage();
 }
 
 void
@@ -77,6 +427,57 @@ kalloc(void)
   release(&kmem.lock);
 
   if(r)
+  {
     memset((char*)r, 5, PGSIZE); // fill with junk
-  return (void*)r;
+  }
+  return (void*)r; 
 }
+
+uint64
+sys_getLivePage(void)
+{
+  acquire(&pages.lock);
+  
+  int cnt[NPROC]; //! should fail when pid is greater than NPROC, ignoring special case like this
+  
+  for(int n = 0; n < NPROC; n++){
+    cnt[n] = 0;
+  }
+  // printf("here1");
+  struct pageStatus *i;
+  for(i = pages.liveList; i != 0; i = i->next){
+    // printf("pid: %d",i->pid);
+    if( i->pid >= NPROC ){
+      printf("!!! pid > NPROC, per proc live page will show error. Total count ok. !!!\n");
+      break;
+    }
+    cnt[ i->pid ]++; 
+  }
+  // printf("here2");
+  for(int n = 0; n < NPROC; n++){
+    if(cnt[n] > 0) printf("pid: %d, live pages: %d\n",n,cnt[n]);
+  }
+  
+  printf("total live pages: %d\n ", pages.liveCnt);
+  release(&pages.lock);
+  
+  return 0;
+}
+
+void permissionPrint(pagetable_t pt, uint64 va){
+  pte_t *pte = walk(pt, va, 0);
+  printf("va: %d pa: %d | ", va, PTE2PA(*pte));
+  if(*pte & PTE_SWAP) {
+    printf("SW ");
+  }
+  if(*pte & PTE_U) {
+    printf("U ");
+  }
+  if(*pte & PTE_X) {
+    printf("X ");
+  }
+  if(*pte & PTE_W) printf("W ");
+  if(*pte & PTE_R) printf("R ");
+  if(*pte & PTE_V) printf("V ");
+  printf("\n");
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..2c7f961 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -289,11 +289,14 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
+  printf("fork called\n");
+  release(&np->lock);
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
     release(&np->lock);
     return -1;
   }
+  acquire(&np->lock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -322,6 +325,8 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  printf("fork done\n");
+
   return pid;
 }
 
@@ -394,6 +399,8 @@ wait(uint64 addr)
   int havekids, pid;
   struct proc *p = myproc();
 
+  printf("in wait\n");
+
   acquire(&wait_lock);
 
   for(;;){
@@ -414,7 +421,13 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
+
+          release(&pp->lock);
+          release(&wait_lock);
           freeproc(pp);
+          acquire(&pp->lock);
+          acquire(&wait_lock);
+
           release(&pp->lock);
           release(&wait_lock);
           return pid;
@@ -431,6 +444,7 @@ wait(uint64 addr)
     
     // Wait for a child to exit.
     sleep(p, &wait_lock);  //DOC: wait-sleep
+    printf("wait done\n");
   }
 }
 
@@ -459,9 +473,11 @@ scheduler(void)
         // to release its lock and then reacquire it
         // before jumping back to us.
         p->state = RUNNING;
+        
+        // printf("pid: %d ", p->pid);
         c->proc = p;
         swtch(&c->context, &p->context);
-
+        
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
@@ -486,8 +502,12 @@ sched(void)
 
   if(!holding(&p->lock))
     panic("sched p->lock");
-  if(mycpu()->noff != 1)
+  while(mycpu()->noff != 1){
+    printf("%d\n", mycpu()->noff);
     panic("sched locks");
+    printf("noff %d\n",mycpu()->noff);
+  }
+    
   if(p->state == RUNNING)
     panic("sched running");
   if(intr_get())
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..e9883b7 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_SWAP (1L << 9)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..2e1d691
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,145 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  printf("swapalloc start\n");
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  
+  printf("swapalloc done\n");
+
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  printf("swapfree start\n");
+
+  if(!s)
+    panic("swapfree");
+  
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+
+  printf("swapmem done\n");
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  begin_op();
+  printf("swapout start\n");
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+  printf("swapout done\n");
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  printf("swap in start\n");
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+  printf("swapin done\n");
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..cc4a916 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_getLivePage(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getLivePage] sys_getLivePage,
 };
 
 void
@@ -144,4 +146,4 @@ syscall(void)
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..26be536 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getLivePage 22
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..bbd538b 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -68,6 +68,7 @@ usertrap(void)
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
+    permissionPrint(p->pagetable,r_stval());
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..2638506 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -186,6 +186,7 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
     if(do_free){
       uint64 pa = PTE2PA(*pte);
       kfree((void*)pa);
+      removePage(pagetable, a);
     }
     *pte = 0;
   }
@@ -244,6 +245,7 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+    addToLivePage(pagetable, a);
   }
   return newsz;
 }
@@ -309,14 +311,20 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   uint64 pa, i;
   uint flags;
   char *mem;
-
+  printf("in uvmcopy\n");
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
+
+    if(flags & PTE_SWAP){
+      swapToLive(old, i);
+    }
+    
     if((mem = kalloc()) == 0)
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
@@ -324,6 +332,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       kfree(mem);
       goto err;
     }
+    addToLivePage(new, i);
   }
   return 0;
 
diff --git a/user/page.c b/user/page.c
new file mode 100644
index 0000000..de396be
--- /dev/null
+++ b/user/page.c
@@ -0,0 +1,9 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+    sleep(1);
+    getLivePage();
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..392974e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getLivePage(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..43156bb 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getLivePage");
\ No newline at end of file
